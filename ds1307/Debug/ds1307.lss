
ds1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002606  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00002606  0000267a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002280  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ee5  00000000  00000000  00004938  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000581d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000597d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 aa 11 	call	0x2354	; 0x2354 <main>
      7a:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e8       	ldi	r26, 0x88	; 136
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	88 e8       	ldi	r24, 0x88	; 136
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e8       	ldi	r22, 0x88	; 136
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <CLCD_voidSendCommand>:
#include  "CLCD_config.h"
#include  "CLCD_interface.h"
#include  "CLCD_pravite.h"

void CLCD_voidSendCommand(u8 copy_u8command)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	e9 97       	sbiw	r28, 0x39	; 57
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 af       	std	Y+57, r24	; 0x39
	/*set rs low for command*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>

	/* set rw PIN to write*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
#elif mode==1

	/*set data value*/
	/*GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));*/
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8command,4));
     cb8:	89 ad       	ldd	r24, Y+57	; 0x39
     cba:	82 95       	swap	r24
     cbc:	8f 70       	andi	r24, 0x0F	; 15
     cbe:	98 2f       	mov	r25, r24
     cc0:	91 70       	andi	r25, 0x01	; 1
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	64 e0       	ldi	r22, 0x04	; 4
     cc6:	49 2f       	mov	r20, r25
     cc8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8command,5));
     ccc:	89 ad       	ldd	r24, Y+57	; 0x39
     cce:	82 95       	swap	r24
     cd0:	86 95       	lsr	r24
     cd2:	87 70       	andi	r24, 0x07	; 7
     cd4:	98 2f       	mov	r25, r24
     cd6:	91 70       	andi	r25, 0x01	; 1
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	65 e0       	ldi	r22, 0x05	; 5
     cdc:	49 2f       	mov	r20, r25
     cde:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8command,6));
     ce2:	89 ad       	ldd	r24, Y+57	; 0x39
     ce4:	82 95       	swap	r24
     ce6:	86 95       	lsr	r24
     ce8:	86 95       	lsr	r24
     cea:	83 70       	andi	r24, 0x03	; 3
     cec:	98 2f       	mov	r25, r24
     cee:	91 70       	andi	r25, 0x01	; 1
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	66 e0       	ldi	r22, 0x06	; 6
     cf4:	49 2f       	mov	r20, r25
     cf6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8command,7));
     cfa:	89 ad       	ldd	r24, Y+57	; 0x39
     cfc:	98 2f       	mov	r25, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	99 27       	eor	r25, r25
     d02:	99 1f       	adc	r25, r25
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	67 e0       	ldi	r22, 0x07	; 7
     d08:	49 2f       	mov	r20, r25
     d0a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>


	/*setportvalue(CLCD_DATA_PORT, copy_u8command& 0xf0);*/
	/*set the enable pulse..*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e8       	ldi	r26, 0x80	; 128
     d1e:	bf e3       	ldi	r27, 0x3F	; 63
     d20:	8d ab       	std	Y+53, r24	; 0x35
     d22:	9e ab       	std	Y+54, r25	; 0x36
     d24:	af ab       	std	Y+55, r26	; 0x37
     d26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d28:	6d a9       	ldd	r22, Y+53	; 0x35
     d2a:	7e a9       	ldd	r23, Y+54	; 0x36
     d2c:	8f a9       	ldd	r24, Y+55	; 0x37
     d2e:	98 ad       	ldd	r25, Y+56	; 0x38
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a e7       	ldi	r20, 0x7A	; 122
     d36:	53 e4       	ldi	r21, 0x43	; 67
     d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	89 ab       	std	Y+49, r24	; 0x31
     d42:	9a ab       	std	Y+50, r25	; 0x32
     d44:	ab ab       	std	Y+51, r26	; 0x33
     d46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d48:	69 a9       	ldd	r22, Y+49	; 0x31
     d4a:	7a a9       	ldd	r23, Y+50	; 0x32
     d4c:	8b a9       	ldd	r24, Y+51	; 0x33
     d4e:	9c a9       	ldd	r25, Y+52	; 0x34
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	2c f4       	brge	.+10     	; 0xd6a <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	98 ab       	std	Y+48, r25	; 0x30
     d66:	8f a7       	std	Y+47, r24	; 0x2f
     d68:	3f c0       	rjmp	.+126    	; 0xde8 <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
     d6a:	69 a9       	ldd	r22, Y+49	; 0x31
     d6c:	7a a9       	ldd	r23, Y+50	; 0x32
     d6e:	8b a9       	ldd	r24, Y+51	; 0x33
     d70:	9c a9       	ldd	r25, Y+52	; 0x34
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d7e:	18 16       	cp	r1, r24
     d80:	4c f5       	brge	.+82     	; 0xdd4 <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d82:	6d a9       	ldd	r22, Y+53	; 0x35
     d84:	7e a9       	ldd	r23, Y+54	; 0x36
     d86:	8f a9       	ldd	r24, Y+55	; 0x37
     d88:	98 ad       	ldd	r25, Y+56	; 0x38
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e2       	ldi	r20, 0x20	; 32
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	98 ab       	std	Y+48, r25	; 0x30
     da8:	8f a7       	std	Y+47, r24	; 0x2f
     daa:	0f c0       	rjmp	.+30     	; 0xdca <CLCD_voidSendCommand+0x13c>
     dac:	89 e1       	ldi	r24, 0x19	; 25
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9e a7       	std	Y+46, r25	; 0x2e
     db2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db4:	8d a5       	ldd	r24, Y+45	; 0x2d
     db6:	9e a5       	ldd	r25, Y+46	; 0x2e
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <CLCD_voidSendCommand+0x12a>
     dbc:	9e a7       	std	Y+46, r25	; 0x2e
     dbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc2:	98 a9       	ldd	r25, Y+48	; 0x30
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	98 ab       	std	Y+48, r25	; 0x30
     dc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8f a5       	ldd	r24, Y+47	; 0x2f
     dcc:	98 a9       	ldd	r25, Y+48	; 0x30
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f7       	brne	.-38     	; 0xdac <CLCD_voidSendCommand+0x11e>
     dd2:	14 c0       	rjmp	.+40     	; 0xdfc <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	69 a9       	ldd	r22, Y+49	; 0x31
     dd6:	7a a9       	ldd	r23, Y+50	; 0x32
     dd8:	8b a9       	ldd	r24, Y+51	; 0x33
     dda:	9c a9       	ldd	r25, Y+52	; 0x34
     ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
     de8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dea:	98 a9       	ldd	r25, Y+48	; 0x30
     dec:	9c a7       	std	Y+44, r25	; 0x2c
     dee:	8b a7       	std	Y+43, r24	; 0x2b
     df0:	8b a5       	ldd	r24, Y+43	; 0x2b
     df2:	9c a5       	ldd	r25, Y+44	; 0x2c
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <CLCD_voidSendCommand+0x166>
     df8:	9c a7       	std	Y+44, r25	; 0x2c
     dfa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e8       	ldi	r26, 0x80	; 128
     e0c:	bf e3       	ldi	r27, 0x3F	; 63
     e0e:	8f a3       	std	Y+39, r24	; 0x27
     e10:	98 a7       	std	Y+40, r25	; 0x28
     e12:	a9 a7       	std	Y+41, r26	; 0x29
     e14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	6f a1       	ldd	r22, Y+39	; 0x27
     e18:	78 a5       	ldd	r23, Y+40	; 0x28
     e1a:	89 a5       	ldd	r24, Y+41	; 0x29
     e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a e7       	ldi	r20, 0x7A	; 122
     e24:	53 e4       	ldi	r21, 0x43	; 67
     e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8b a3       	std	Y+35, r24	; 0x23
     e30:	9c a3       	std	Y+36, r25	; 0x24
     e32:	ad a3       	std	Y+37, r26	; 0x25
     e34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e36:	6b a1       	ldd	r22, Y+35	; 0x23
     e38:	7c a1       	ldd	r23, Y+36	; 0x24
     e3a:	8d a1       	ldd	r24, Y+37	; 0x25
     e3c:	9e a1       	ldd	r25, Y+38	; 0x26
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <CLCD_voidSendCommand+0x1ca>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9a a3       	std	Y+34, r25	; 0x22
     e54:	89 a3       	std	Y+33, r24	; 0x21
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <CLCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
     e58:	6b a1       	ldd	r22, Y+35	; 0x23
     e5a:	7c a1       	ldd	r23, Y+36	; 0x24
     e5c:	8d a1       	ldd	r24, Y+37	; 0x25
     e5e:	9e a1       	ldd	r25, Y+38	; 0x26
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <CLCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	6f a1       	ldd	r22, Y+39	; 0x27
     e72:	78 a5       	ldd	r23, Y+40	; 0x28
     e74:	89 a5       	ldd	r24, Y+41	; 0x29
     e76:	9a a5       	ldd	r25, Y+42	; 0x2a
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9a a3       	std	Y+34, r25	; 0x22
     e96:	89 a3       	std	Y+33, r24	; 0x21
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <CLCD_voidSendCommand+0x22a>
     e9a:	89 e1       	ldi	r24, 0x19	; 25
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	98 a3       	std	Y+32, r25	; 0x20
     ea0:	8f 8f       	std	Y+31, r24	; 0x1f
     ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea4:	98 a1       	ldd	r25, Y+32	; 0x20
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <CLCD_voidSendCommand+0x218>
     eaa:	98 a3       	std	Y+32, r25	; 0x20
     eac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	89 a1       	ldd	r24, Y+33	; 0x21
     eb0:	9a a1       	ldd	r25, Y+34	; 0x22
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9a a3       	std	Y+34, r25	; 0x22
     eb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	89 a1       	ldd	r24, Y+33	; 0x21
     eba:	9a a1       	ldd	r25, Y+34	; 0x22
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <CLCD_voidSendCommand+0x20c>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <CLCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6b a1       	ldd	r22, Y+35	; 0x23
     ec4:	7c a1       	ldd	r23, Y+36	; 0x24
     ec6:	8d a1       	ldd	r24, Y+37	; 0x25
     ec8:	9e a1       	ldd	r25, Y+38	; 0x26
     eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9a a3       	std	Y+34, r25	; 0x22
     ed4:	89 a3       	std	Y+33, r24	; 0x21
     ed6:	89 a1       	ldd	r24, Y+33	; 0x21
     ed8:	9a a1       	ldd	r25, Y+34	; 0x22
     eda:	9e 8f       	std	Y+30, r25	; 0x1e
     edc:	8d 8f       	std	Y+29, r24	; 0x1d
     ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <CLCD_voidSendCommand+0x254>
     ee6:	9e 8f       	std	Y+30, r25	; 0x1e
     ee8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/*set low for bits in data value*/
	/*setportvalue(CLCD_DATA_PORT, (copy_u8command<<4)&0xf0);*/
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8command,0));
     eea:	89 ad       	ldd	r24, Y+57	; 0x39
     eec:	98 2f       	mov	r25, r24
     eee:	91 70       	andi	r25, 0x01	; 1
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	64 e0       	ldi	r22, 0x04	; 4
     ef4:	49 2f       	mov	r20, r25
     ef6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8command,1));
     efa:	89 ad       	ldd	r24, Y+57	; 0x39
     efc:	86 95       	lsr	r24
     efe:	98 2f       	mov	r25, r24
     f00:	91 70       	andi	r25, 0x01	; 1
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	65 e0       	ldi	r22, 0x05	; 5
     f06:	49 2f       	mov	r20, r25
     f08:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8command,2));
     f0c:	89 ad       	ldd	r24, Y+57	; 0x39
     f0e:	86 95       	lsr	r24
     f10:	86 95       	lsr	r24
     f12:	98 2f       	mov	r25, r24
     f14:	91 70       	andi	r25, 0x01	; 1
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	66 e0       	ldi	r22, 0x06	; 6
     f1a:	49 2f       	mov	r20, r25
     f1c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8command,3));
     f20:	89 ad       	ldd	r24, Y+57	; 0x39
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	86 95       	lsr	r24
     f28:	98 2f       	mov	r25, r24
     f2a:	91 70       	andi	r25, 0x01	; 1
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	67 e0       	ldi	r22, 0x07	; 7
     f30:	49 2f       	mov	r20, r25
     f32:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>

	/*set the enable pulse..*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e8       	ldi	r26, 0x80	; 128
     f46:	bf e3       	ldi	r27, 0x3F	; 63
     f48:	89 8f       	std	Y+25, r24	; 0x19
     f4a:	9a 8f       	std	Y+26, r25	; 0x1a
     f4c:	ab 8f       	std	Y+27, r26	; 0x1b
     f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f50:	69 8d       	ldd	r22, Y+25	; 0x19
     f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	4a e7       	ldi	r20, 0x7A	; 122
     f5e:	53 e4       	ldi	r21, 0x43	; 67
     f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8d 8b       	std	Y+21, r24	; 0x15
     f6a:	9e 8b       	std	Y+22, r25	; 0x16
     f6c:	af 8b       	std	Y+23, r26	; 0x17
     f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f70:	6d 89       	ldd	r22, Y+21	; 0x15
     f72:	7e 89       	ldd	r23, Y+22	; 0x16
     f74:	8f 89       	ldd	r24, Y+23	; 0x17
     f76:	98 8d       	ldd	r25, Y+24	; 0x18
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	2c f4       	brge	.+10     	; 0xf92 <CLCD_voidSendCommand+0x304>
		__ticks = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
     f90:	3f c0       	rjmp	.+126    	; 0x1010 <CLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
     f92:	6d 89       	ldd	r22, Y+21	; 0x15
     f94:	7e 89       	ldd	r23, Y+22	; 0x16
     f96:	8f 89       	ldd	r24, Y+23	; 0x17
     f98:	98 8d       	ldd	r25, Y+24	; 0x18
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	4c f5       	brge	.+82     	; 0xffc <CLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	69 8d       	ldd	r22, Y+25	; 0x19
     fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9c 8b       	std	Y+20, r25	; 0x14
     fd0:	8b 8b       	std	Y+19, r24	; 0x13
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <CLCD_voidSendCommand+0x364>
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9a 8b       	std	Y+18, r25	; 0x12
     fda:	89 8b       	std	Y+17, r24	; 0x11
     fdc:	89 89       	ldd	r24, Y+17	; 0x11
     fde:	9a 89       	ldd	r25, Y+18	; 0x12
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <CLCD_voidSendCommand+0x352>
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	8b 89       	ldd	r24, Y+19	; 0x13
     fea:	9c 89       	ldd	r25, Y+20	; 0x14
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	9c 8b       	std	Y+20, r25	; 0x14
     ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff2:	8b 89       	ldd	r24, Y+19	; 0x13
     ff4:	9c 89       	ldd	r25, Y+20	; 0x14
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	69 f7       	brne	.-38     	; 0xfd4 <CLCD_voidSendCommand+0x346>
     ffa:	14 c0       	rjmp	.+40     	; 0x1024 <CLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffc:	6d 89       	ldd	r22, Y+21	; 0x15
     ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    1000:	8f 89       	ldd	r24, Y+23	; 0x17
    1002:	98 8d       	ldd	r25, Y+24	; 0x18
    1004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	98 8b       	std	Y+16, r25	; 0x10
    1016:	8f 87       	std	Y+15, r24	; 0x0f
    1018:	8f 85       	ldd	r24, Y+15	; 0x0f
    101a:	98 89       	ldd	r25, Y+16	; 0x10
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <CLCD_voidSendCommand+0x38e>
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e8       	ldi	r26, 0x80	; 128
    1034:	bf e3       	ldi	r27, 0x3F	; 63
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	9c 87       	std	Y+12, r25	; 0x0c
    103a:	ad 87       	std	Y+13, r26	; 0x0d
    103c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a e7       	ldi	r20, 0x7A	; 122
    104c:	53 e4       	ldi	r21, 0x43	; 67
    104e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8f 83       	std	Y+7, r24	; 0x07
    1058:	98 87       	std	Y+8, r25	; 0x08
    105a:	a9 87       	std	Y+9, r26	; 0x09
    105c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105e:	6f 81       	ldd	r22, Y+7	; 0x07
    1060:	78 85       	ldd	r23, Y+8	; 0x08
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <CLCD_voidSendCommand+0x3f2>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <CLCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <CLCD_voidSendCommand+0x452>
    10c2:	89 e1       	ldi	r24, 0x19	; 25
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <CLCD_voidSendCommand+0x440>
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <CLCD_voidSendCommand+0x434>
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <CLCD_voidSendCommand+0x47c>
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


#endif
}
    1112:	e9 96       	adiw	r28, 0x39	; 57
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <CLCD_voidSendData>:
void CLCD_voidSendData(u8 copy_u8Data)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	c3 54       	subi	r28, 0x43	; 67
    112e:	d0 40       	sbci	r29, 0x00	; 0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	fe 01       	movw	r30, r28
    113c:	ed 5b       	subi	r30, 0xBD	; 189
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 83       	st	Z, r24
	/*set rs high for data*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	/* set rw PIN to write*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
#elif mode==1


	/*set high 4 bits*/
	/*setportvalue(CLCD_DATA_PORT, copy_u8Data & 0xf0);*/
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8Data,4));
    1156:	fe 01       	movw	r30, r28
    1158:	ed 5b       	subi	r30, 0xBD	; 189
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	82 95       	swap	r24
    1160:	8f 70       	andi	r24, 0x0F	; 15
    1162:	98 2f       	mov	r25, r24
    1164:	91 70       	andi	r25, 0x01	; 1
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	64 e0       	ldi	r22, 0x04	; 4
    116a:	49 2f       	mov	r20, r25
    116c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8Data,5));
    1170:	fe 01       	movw	r30, r28
    1172:	ed 5b       	subi	r30, 0xBD	; 189
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	82 95       	swap	r24
    117a:	86 95       	lsr	r24
    117c:	87 70       	andi	r24, 0x07	; 7
    117e:	98 2f       	mov	r25, r24
    1180:	91 70       	andi	r25, 0x01	; 1
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	65 e0       	ldi	r22, 0x05	; 5
    1186:	49 2f       	mov	r20, r25
    1188:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8Data,6));
    118c:	fe 01       	movw	r30, r28
    118e:	ed 5b       	subi	r30, 0xBD	; 189
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
    1194:	82 95       	swap	r24
    1196:	86 95       	lsr	r24
    1198:	86 95       	lsr	r24
    119a:	83 70       	andi	r24, 0x03	; 3
    119c:	98 2f       	mov	r25, r24
    119e:	91 70       	andi	r25, 0x01	; 1
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	66 e0       	ldi	r22, 0x06	; 6
    11a4:	49 2f       	mov	r20, r25
    11a6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8Data,7));
    11aa:	fe 01       	movw	r30, r28
    11ac:	ed 5b       	subi	r30, 0xBD	; 189
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	98 2f       	mov	r25, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	99 27       	eor	r25, r25
    11b8:	99 1f       	adc	r25, r25
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	67 e0       	ldi	r22, 0x07	; 7
    11be:	49 2f       	mov	r20, r25
    11c0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	/*set the enable pulse..*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
    11ce:	fe 01       	movw	r30, r28
    11d0:	ff 96       	adiw	r30, 0x3f	; 63
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a0 e8       	ldi	r26, 0x80	; 128
    11d8:	bf e3       	ldi	r27, 0x3F	; 63
    11da:	80 83       	st	Z, r24
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	a2 83       	std	Z+2, r26	; 0x02
    11e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e2:	fe 01       	movw	r30, r28
    11e4:	ff 96       	adiw	r30, 0x3f	; 63
    11e6:	60 81       	ld	r22, Z
    11e8:	71 81       	ldd	r23, Z+1	; 0x01
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	93 81       	ldd	r25, Z+3	; 0x03
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a e7       	ldi	r20, 0x7A	; 122
    11f4:	53 e4       	ldi	r21, 0x43	; 67
    11f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	8b af       	std	Y+59, r24	; 0x3b
    1200:	9c af       	std	Y+60, r25	; 0x3c
    1202:	ad af       	std	Y+61, r26	; 0x3d
    1204:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1206:	6b ad       	ldd	r22, Y+59	; 0x3b
    1208:	7c ad       	ldd	r23, Y+60	; 0x3c
    120a:	8d ad       	ldd	r24, Y+61	; 0x3d
    120c:	9e ad       	ldd	r25, Y+62	; 0x3e
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    121a:	88 23       	and	r24, r24
    121c:	2c f4       	brge	.+10     	; 0x1228 <CLCD_voidSendData+0x104>
		__ticks = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9a af       	std	Y+58, r25	; 0x3a
    1224:	89 af       	std	Y+57, r24	; 0x39
    1226:	41 c0       	rjmp	.+130    	; 0x12aa <CLCD_voidSendData+0x186>
	else if (__tmp > 65535)
    1228:	6b ad       	ldd	r22, Y+59	; 0x3b
    122a:	7c ad       	ldd	r23, Y+60	; 0x3c
    122c:	8d ad       	ldd	r24, Y+61	; 0x3d
    122e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    123c:	18 16       	cp	r1, r24
    123e:	5c f5       	brge	.+86     	; 0x1296 <CLCD_voidSendData+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1240:	fe 01       	movw	r30, r28
    1242:	ff 96       	adiw	r30, 0x3f	; 63
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9a af       	std	Y+58, r25	; 0x3a
    126a:	89 af       	std	Y+57, r24	; 0x39
    126c:	0f c0       	rjmp	.+30     	; 0x128c <CLCD_voidSendData+0x168>
    126e:	89 e1       	ldi	r24, 0x19	; 25
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	98 af       	std	Y+56, r25	; 0x38
    1274:	8f ab       	std	Y+55, r24	; 0x37
    1276:	8f a9       	ldd	r24, Y+55	; 0x37
    1278:	98 ad       	ldd	r25, Y+56	; 0x38
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <CLCD_voidSendData+0x156>
    127e:	98 af       	std	Y+56, r25	; 0x38
    1280:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	89 ad       	ldd	r24, Y+57	; 0x39
    1284:	9a ad       	ldd	r25, Y+58	; 0x3a
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9a af       	std	Y+58, r25	; 0x3a
    128a:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	89 ad       	ldd	r24, Y+57	; 0x39
    128e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f7       	brne	.-38     	; 0x126e <CLCD_voidSendData+0x14a>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <CLCD_voidSendData+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1296:	6b ad       	ldd	r22, Y+59	; 0x3b
    1298:	7c ad       	ldd	r23, Y+60	; 0x3c
    129a:	8d ad       	ldd	r24, Y+61	; 0x3d
    129c:	9e ad       	ldd	r25, Y+62	; 0x3e
    129e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9a af       	std	Y+58, r25	; 0x3a
    12a8:	89 af       	std	Y+57, r24	; 0x39
    12aa:	89 ad       	ldd	r24, Y+57	; 0x39
    12ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ae:	9e ab       	std	Y+54, r25	; 0x36
    12b0:	8d ab       	std	Y+53, r24	; 0x35
    12b2:	8d a9       	ldd	r24, Y+53	; 0x35
    12b4:	9e a9       	ldd	r25, Y+54	; 0x36
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <CLCD_voidSendData+0x192>
    12ba:	9e ab       	std	Y+54, r25	; 0x36
    12bc:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(1);
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	62 e0       	ldi	r22, 0x02	; 2
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a8 ec       	ldi	r26, 0xC8	; 200
    12ce:	b2 e4       	ldi	r27, 0x42	; 66
    12d0:	89 ab       	std	Y+49, r24	; 0x31
    12d2:	9a ab       	std	Y+50, r25	; 0x32
    12d4:	ab ab       	std	Y+51, r26	; 0x33
    12d6:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12d8:	69 a9       	ldd	r22, Y+49	; 0x31
    12da:	7a a9       	ldd	r23, Y+50	; 0x32
    12dc:	8b a9       	ldd	r24, Y+51	; 0x33
    12de:	9c a9       	ldd	r25, Y+52	; 0x34
    12e0:	2b ea       	ldi	r18, 0xAB	; 171
    12e2:	3a ea       	ldi	r19, 0xAA	; 170
    12e4:	4a ea       	ldi	r20, 0xAA	; 170
    12e6:	5e e3       	ldi	r21, 0x3E	; 62
    12e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8d a7       	std	Y+45, r24	; 0x2d
    12f2:	9e a7       	std	Y+46, r25	; 0x2e
    12f4:	af a7       	std	Y+47, r26	; 0x2f
    12f6:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    12f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    12fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    12fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    12fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	5f e3       	ldi	r21, 0x3F	; 63
    1308:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	1c f4       	brge	.+6      	; 0x1316 <CLCD_voidSendData+0x1f2>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	8c a7       	std	Y+44, r24	; 0x2c
    1314:	91 c0       	rjmp	.+290    	; 0x1438 <CLCD_voidSendData+0x314>
	else if (__tmp > 255)
    1316:	6d a5       	ldd	r22, Y+45	; 0x2d
    1318:	7e a5       	ldd	r23, Y+46	; 0x2e
    131a:	8f a5       	ldd	r24, Y+47	; 0x2f
    131c:	98 a9       	ldd	r25, Y+48	; 0x30
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	53 e4       	ldi	r21, 0x43	; 67
    1326:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	0c f0       	brlt	.+2      	; 0x1330 <CLCD_voidSendData+0x20c>
    132e:	7b c0       	rjmp	.+246    	; 0x1426 <CLCD_voidSendData+0x302>
	{
		_delay_ms(__us / 1000.0);
    1330:	69 a9       	ldd	r22, Y+49	; 0x31
    1332:	7a a9       	ldd	r23, Y+50	; 0x32
    1334:	8b a9       	ldd	r24, Y+51	; 0x33
    1336:	9c a9       	ldd	r25, Y+52	; 0x34
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a e7       	ldi	r20, 0x7A	; 122
    133e:	54 e4       	ldi	r21, 0x44	; 68
    1340:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	88 a7       	std	Y+40, r24	; 0x28
    134a:	99 a7       	std	Y+41, r25	; 0x29
    134c:	aa a7       	std	Y+42, r26	; 0x2a
    134e:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1350:	68 a5       	ldd	r22, Y+40	; 0x28
    1352:	79 a5       	ldd	r23, Y+41	; 0x29
    1354:	8a a5       	ldd	r24, Y+42	; 0x2a
    1356:	9b a5       	ldd	r25, Y+43	; 0x2b
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	4a e7       	ldi	r20, 0x7A	; 122
    135e:	53 e4       	ldi	r21, 0x43	; 67
    1360:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	8c a3       	std	Y+36, r24	; 0x24
    136a:	9d a3       	std	Y+37, r25	; 0x25
    136c:	ae a3       	std	Y+38, r26	; 0x26
    136e:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1370:	6c a1       	ldd	r22, Y+36	; 0x24
    1372:	7d a1       	ldd	r23, Y+37	; 0x25
    1374:	8e a1       	ldd	r24, Y+38	; 0x26
    1376:	9f a1       	ldd	r25, Y+39	; 0x27
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e8       	ldi	r20, 0x80	; 128
    137e:	5f e3       	ldi	r21, 0x3F	; 63
    1380:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1384:	88 23       	and	r24, r24
    1386:	2c f4       	brge	.+10     	; 0x1392 <CLCD_voidSendData+0x26e>
		__ticks = 1;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9b a3       	std	Y+35, r25	; 0x23
    138e:	8a a3       	std	Y+34, r24	; 0x22
    1390:	3f c0       	rjmp	.+126    	; 0x1410 <CLCD_voidSendData+0x2ec>
	else if (__tmp > 65535)
    1392:	6c a1       	ldd	r22, Y+36	; 0x24
    1394:	7d a1       	ldd	r23, Y+37	; 0x25
    1396:	8e a1       	ldd	r24, Y+38	; 0x26
    1398:	9f a1       	ldd	r25, Y+39	; 0x27
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	57 e4       	ldi	r21, 0x47	; 71
    13a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	4c f5       	brge	.+82     	; 0x13fc <CLCD_voidSendData+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13aa:	68 a5       	ldd	r22, Y+40	; 0x28
    13ac:	79 a5       	ldd	r23, Y+41	; 0x29
    13ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    13b0:	9b a5       	ldd	r25, Y+43	; 0x2b
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e2       	ldi	r20, 0x20	; 32
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	9b a3       	std	Y+35, r25	; 0x23
    13d0:	8a a3       	std	Y+34, r24	; 0x22
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <CLCD_voidSendData+0x2ce>
    13d4:	89 e1       	ldi	r24, 0x19	; 25
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	99 a3       	std	Y+33, r25	; 0x21
    13da:	88 a3       	std	Y+32, r24	; 0x20
    13dc:	88 a1       	ldd	r24, Y+32	; 0x20
    13de:	99 a1       	ldd	r25, Y+33	; 0x21
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <CLCD_voidSendData+0x2bc>
    13e4:	99 a3       	std	Y+33, r25	; 0x21
    13e6:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e8:	8a a1       	ldd	r24, Y+34	; 0x22
    13ea:	9b a1       	ldd	r25, Y+35	; 0x23
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	9b a3       	std	Y+35, r25	; 0x23
    13f0:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f2:	8a a1       	ldd	r24, Y+34	; 0x22
    13f4:	9b a1       	ldd	r25, Y+35	; 0x23
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	69 f7       	brne	.-38     	; 0x13d4 <CLCD_voidSendData+0x2b0>
    13fa:	24 c0       	rjmp	.+72     	; 0x1444 <CLCD_voidSendData+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fc:	6c a1       	ldd	r22, Y+36	; 0x24
    13fe:	7d a1       	ldd	r23, Y+37	; 0x25
    1400:	8e a1       	ldd	r24, Y+38	; 0x26
    1402:	9f a1       	ldd	r25, Y+39	; 0x27
    1404:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9b a3       	std	Y+35, r25	; 0x23
    140e:	8a a3       	std	Y+34, r24	; 0x22
    1410:	8a a1       	ldd	r24, Y+34	; 0x22
    1412:	9b a1       	ldd	r25, Y+35	; 0x23
    1414:	9f 8f       	std	Y+31, r25	; 0x1f
    1416:	8e 8f       	std	Y+30, r24	; 0x1e
    1418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <CLCD_voidSendData+0x2f8>
    1420:	9f 8f       	std	Y+31, r25	; 0x1f
    1422:	8e 8f       	std	Y+30, r24	; 0x1e
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1426:	6d a5       	ldd	r22, Y+45	; 0x2d
    1428:	7e a5       	ldd	r23, Y+46	; 0x2e
    142a:	8f a5       	ldd	r24, Y+47	; 0x2f
    142c:	98 a9       	ldd	r25, Y+48	; 0x30
    142e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	8c a7       	std	Y+44, r24	; 0x2c
    1438:	8c a5       	ldd	r24, Y+44	; 0x2c
    143a:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    143c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    143e:	8a 95       	dec	r24
    1440:	f1 f7       	brne	.-4      	; 0x143e <CLCD_voidSendData+0x31a>
    1442:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(100);

	/*set low 4 bits*/
	/*setportvalue(CLCD_DATA_PORT, (copy_u8Data<<4)& 0xf0);*/
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8Data,0));
    1444:	fe 01       	movw	r30, r28
    1446:	ed 5b       	subi	r30, 0xBD	; 189
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	98 2f       	mov	r25, r24
    144e:	91 70       	andi	r25, 0x01	; 1
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	64 e0       	ldi	r22, 0x04	; 4
    1454:	49 2f       	mov	r20, r25
    1456:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8Data,1));
    145a:	fe 01       	movw	r30, r28
    145c:	ed 5b       	subi	r30, 0xBD	; 189
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 81       	ld	r24, Z
    1462:	86 95       	lsr	r24
    1464:	98 2f       	mov	r25, r24
    1466:	91 70       	andi	r25, 0x01	; 1
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	49 2f       	mov	r20, r25
    146e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8Data,2));
    1472:	fe 01       	movw	r30, r28
    1474:	ed 5b       	subi	r30, 0xBD	; 189
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	86 95       	lsr	r24
    147c:	86 95       	lsr	r24
    147e:	98 2f       	mov	r25, r24
    1480:	91 70       	andi	r25, 0x01	; 1
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	66 e0       	ldi	r22, 0x06	; 6
    1486:	49 2f       	mov	r20, r25
    1488:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	DIO_u8SetPin(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8Data,3));
    148c:	fe 01       	movw	r30, r28
    148e:	ed 5b       	subi	r30, 0xBD	; 189
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	86 95       	lsr	r24
    1496:	86 95       	lsr	r24
    1498:	86 95       	lsr	r24
    149a:	98 2f       	mov	r25, r24
    149c:	91 70       	andi	r25, 0x01	; 1
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	67 e0       	ldi	r22, 0x07	; 7
    14a2:	49 2f       	mov	r20, r25
    14a4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
	/*set the enable pulse..*/
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e8       	ldi	r26, 0x80	; 128
    14b8:	bf e3       	ldi	r27, 0x3F	; 63
    14ba:	89 8f       	std	Y+25, r24	; 0x19
    14bc:	9a 8f       	std	Y+26, r25	; 0x1a
    14be:	ab 8f       	std	Y+27, r26	; 0x1b
    14c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	69 8d       	ldd	r22, Y+25	; 0x19
    14c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	53 e4       	ldi	r21, 0x43	; 67
    14d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8d 8b       	std	Y+21, r24	; 0x15
    14dc:	9e 8b       	std	Y+22, r25	; 0x16
    14de:	af 8b       	std	Y+23, r26	; 0x17
    14e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e2:	6d 89       	ldd	r22, Y+21	; 0x15
    14e4:	7e 89       	ldd	r23, Y+22	; 0x16
    14e6:	8f 89       	ldd	r24, Y+23	; 0x17
    14e8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <CLCD_voidSendData+0x3e0>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9c 8b       	std	Y+20, r25	; 0x14
    1500:	8b 8b       	std	Y+19, r24	; 0x13
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <CLCD_voidSendData+0x45e>
	else if (__tmp > 65535)
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <CLCD_voidSendData+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	69 8d       	ldd	r22, Y+25	; 0x19
    151e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1520:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1522:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9c 8b       	std	Y+20, r25	; 0x14
    1542:	8b 8b       	std	Y+19, r24	; 0x13
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <CLCD_voidSendData+0x440>
    1546:	89 e1       	ldi	r24, 0x19	; 25
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9a 8b       	std	Y+18, r25	; 0x12
    154c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    154e:	89 89       	ldd	r24, Y+17	; 0x11
    1550:	9a 89       	ldd	r25, Y+18	; 0x12
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <CLCD_voidSendData+0x42e>
    1556:	9a 8b       	std	Y+18, r25	; 0x12
    1558:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8b 89       	ldd	r24, Y+19	; 0x13
    155c:	9c 89       	ldd	r25, Y+20	; 0x14
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9c 8b       	std	Y+20, r25	; 0x14
    1562:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8b 89       	ldd	r24, Y+19	; 0x13
    1566:	9c 89       	ldd	r25, Y+20	; 0x14
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <CLCD_voidSendData+0x422>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <CLCD_voidSendData+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6d 89       	ldd	r22, Y+21	; 0x15
    1570:	7e 89       	ldd	r23, Y+22	; 0x16
    1572:	8f 89       	ldd	r24, Y+23	; 0x17
    1574:	98 8d       	ldd	r25, Y+24	; 0x18
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9c 8b       	std	Y+20, r25	; 0x14
    1580:	8b 8b       	std	Y+19, r24	; 0x13
    1582:	8b 89       	ldd	r24, Y+19	; 0x13
    1584:	9c 89       	ldd	r25, Y+20	; 0x14
    1586:	98 8b       	std	Y+16, r25	; 0x10
    1588:	8f 87       	std	Y+15, r24	; 0x0f
    158a:	8f 85       	ldd	r24, Y+15	; 0x0f
    158c:	98 89       	ldd	r25, Y+16	; 0x10
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <CLCD_voidSendData+0x46a>
    1592:	98 8b       	std	Y+16, r25	; 0x10
    1594:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPin(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	62 e0       	ldi	r22, 0x02	; 2
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPin>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 e8       	ldi	r26, 0x80	; 128
    15a6:	bf e3       	ldi	r27, 0x3F	; 63
    15a8:	8b 87       	std	Y+11, r24	; 0x0b
    15aa:	9c 87       	std	Y+12, r25	; 0x0c
    15ac:	ad 87       	std	Y+13, r26	; 0x0d
    15ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a e7       	ldi	r20, 0x7A	; 122
    15be:	53 e4       	ldi	r21, 0x43	; 67
    15c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	8f 83       	std	Y+7, r24	; 0x07
    15ca:	98 87       	std	Y+8, r25	; 0x08
    15cc:	a9 87       	std	Y+9, r26	; 0x09
    15ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <CLCD_voidSendData+0x4ce>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <CLCD_voidSendData+0x54c>
	else if (__tmp > 65535)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <CLCD_voidSendData+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	6b 85       	ldd	r22, Y+11	; 0x0b
    160c:	7c 85       	ldd	r23, Y+12	; 0x0c
    160e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1610:	9e 85       	ldd	r25, Y+14	; 0x0e
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <CLCD_voidSendData+0x52e>
    1634:	89 e1       	ldi	r24, 0x19	; 25
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <CLCD_voidSendData+0x51c>
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <CLCD_voidSendData+0x510>
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <CLCD_voidSendData+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <CLCD_voidSendData+0x558>
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    1684:	cd 5b       	subi	r28, 0xBD	; 189
    1686:	df 4f       	sbci	r29, 0xFF	; 255
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	2e 97       	sbiw	r28, 0x0e	; 14
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a4 e2       	ldi	r26, 0x24	; 36
    16b2:	b2 e4       	ldi	r27, 0x42	; 66
    16b4:	8b 87       	std	Y+11, r24	; 0x0b
    16b6:	9c 87       	std	Y+12, r25	; 0x0c
    16b8:	ad 87       	std	Y+13, r26	; 0x0d
    16ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16be:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8f 83       	std	Y+7, r24	; 0x07
    16d6:	98 87       	std	Y+8, r25	; 0x08
    16d8:	a9 87       	std	Y+9, r26	; 0x09
    16da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <CLCD_voidInit+0x66>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	0f c0       	rjmp	.+30     	; 0x175e <CLCD_voidInit+0xc6>
    1740:	89 e1       	ldi	r24, 0x19	; 25
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <CLCD_voidInit+0xb4>
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <CLCD_voidInit+0xa8>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <CLCD_voidInit+0xf0>
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
#elif mode ==1
	{
		/*wait for more than 40 ms*/
		_delay_ms(41);

		CLCD_voidSendCommand(0x33);
    1790:	83 e3       	ldi	r24, 0x33	; 51
    1792:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x32);
    1796:	82 e3       	ldi	r24, 0x32	; 50
    1798:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>


		/*function set command : 2line ,5*8 front size*/
		CLCD_voidSendCommand(0x28);
    179c:	88 e2       	ldi	r24, 0x28	; 40
    179e:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>

		/*diplaly on off control,display enable,cursor enable,blink enable*/
		CLCD_voidSendCommand(0b00001100);
    17a2:	8c e0       	ldi	r24, 0x0C	; 12
    17a4:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>

		/*clear display*/
		CLCD_voidSendCommand(1);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
	}
#endif

}
    17ae:	2e 96       	adiw	r28, 0x0e	; 14
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* copy_string)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <CLCD_voidSendString+0x6>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	0a c0       	rjmp	.+20     	; 0x17e4 <CLCD_voidSendString+0x24>
	while(*copy_string !='\0')
	{
		CLCD_voidSendData(*copy_string);
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	80 81       	ld	r24, Z
    17d6:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		copy_string++;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void CLCD_voidSendString(const char* copy_string)
{
	while(*copy_string !='\0')
    17e4:	e9 81       	ldd	r30, Y+1	; 0x01
    17e6:	fa 81       	ldd	r31, Y+2	; 0x02
    17e8:	80 81       	ld	r24, Z
    17ea:	88 23       	and	r24, r24
    17ec:	89 f7       	brne	.-30     	; 0x17d0 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*copy_string);
		copy_string++;

	}

}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <CLCD_voidGOTOXY>:
void CLCD_voidGOTOXY(u8 copy_u8xpostion,u8 copy_u8ypostion)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <CLCD_voidGOTOXY+0x6>
    17fe:	0f 92       	push	r0
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8a 83       	std	Y+2, r24	; 0x02
    1806:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8xpostion==0)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	88 23       	and	r24, r24
    180c:	19 f4       	brne	.+6      	; 0x1814 <CLCD_voidGOTOXY+0x1c>
	{
		/*the location at the frist line */
		Local_u8Address=copy_u8ypostion;
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <CLCD_voidGOTOXY+0x28>
	}
	else if(copy_u8xpostion==1)
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	19 f4       	brne	.+6      	; 0x1820 <CLCD_voidGOTOXY+0x28>
	{
		/*the location at the second line*/
		Local_u8Address=0x40+copy_u8ypostion;
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	80 5c       	subi	r24, 0xC0	; 192
    181e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit 7 in DDRAM address and send command*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	80 58       	subi	r24, 0x80	; 128
    1824:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <CLCD_voidWrite_SpacialC>:

void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	27 97       	sbiw	r28, 0x07	; 7
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	6d 83       	std	Y+5, r22	; 0x05
    184e:	4e 83       	std	Y+6, r20	; 0x06
    1850:	2f 83       	std	Y+7, r18	; 0x07
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(address+64);
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	80 5c       	subi	r24, 0xC0	; 192
    186a:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    186e:	19 82       	std	Y+1, r1	; 0x01
    1870:	0e c0       	rjmp	.+28     	; 0x188e <CLCD_voidWrite_SpacialC+0x5a>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	fc 01       	movw	r30, r24
    187e:	e2 0f       	add	r30, r18
    1880:	f3 1f       	adc	r31, r19
    1882:	80 81       	ld	r24, Z
    1884:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
	CLCD_voidSendCommand(address+64);
	for(u8 i=0;i<8;i++)
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	88 30       	cpi	r24, 0x08	; 8
    1892:	78 f3       	brcs	.-34     	; 0x1872 <CLCD_voidWrite_SpacialC+0x3e>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
	}
	/*return to dd ram*/
	CLCD_voidGOTOXY(copy_u8xpos	, copy_u8ypos);
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <CLCD_voidGOTOXY>

	CLCD_voidSendData(copy_u8Blocknum);
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>

}
    18a2:	27 96       	adiw	r28, 0x07	; 7
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <CLCD_voidNumber>:
void CLCD_voidNumber(u32 copy_u32Number)
{
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	6e 87       	std	Y+14, r22	; 0x0e
    18ce:	7f 87       	std	Y+15, r23	; 0x0f
    18d0:	88 8b       	std	Y+16, r24	; 0x10
    18d2:	99 8b       	std	Y+17, r25	; 0x11

	/*create arr of char from 11 element*/
	char buf[12];  // max 10 digits + null terminator
	u8 i = 10;
    18d4:	8a e0       	ldi	r24, 0x0A	; 10
    18d6:	89 83       	std	Y+1, r24	; 0x01
	buf[i--] = '\0';
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	ce 01       	movw	r24, r28
    18e0:	02 96       	adiw	r24, 0x02	; 2
    18e2:	fc 01       	movw	r30, r24
    18e4:	e2 0f       	add	r30, r18
    18e6:	f3 1f       	adc	r31, r19
    18e8:	10 82       	st	Z, r1
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	81 50       	subi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
	do {
		buf[i--] = copy_u32Number % 10 + '0';
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	08 2f       	mov	r16, r24
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    18fa:	a8 89       	ldd	r26, Y+16	; 0x10
    18fc:	b9 89       	ldd	r27, Y+17	; 0x11
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 a8 12 	call	0x2550	; 0x2550 <__udivmodsi4>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	28 2f       	mov	r18, r24
    1914:	20 5d       	subi	r18, 0xD0	; 208
    1916:	ce 01       	movw	r24, r28
    1918:	02 96       	adiw	r24, 0x02	; 2
    191a:	fc 01       	movw	r30, r24
    191c:	e0 0f       	add	r30, r16
    191e:	f1 1f       	adc	r31, r17
    1920:	20 83       	st	Z, r18
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	81 50       	subi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
		copy_u32Number /= 10;
    1928:	8e 85       	ldd	r24, Y+14	; 0x0e
    192a:	9f 85       	ldd	r25, Y+15	; 0x0f
    192c:	a8 89       	ldd	r26, Y+16	; 0x10
    192e:	b9 89       	ldd	r27, Y+17	; 0x11
    1930:	2a e0       	ldi	r18, 0x0A	; 10
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 a8 12 	call	0x2550	; 0x2550 <__udivmodsi4>
    1940:	da 01       	movw	r26, r20
    1942:	c9 01       	movw	r24, r18
    1944:	8e 87       	std	Y+14, r24	; 0x0e
    1946:	9f 87       	std	Y+15, r25	; 0x0f
    1948:	a8 8b       	std	Y+16, r26	; 0x10
    194a:	b9 8b       	std	Y+17, r27	; 0x11
	} while (copy_u32Number > 0 && i > 0);
    194c:	8e 85       	ldd	r24, Y+14	; 0x0e
    194e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1950:	a8 89       	ldd	r26, Y+16	; 0x10
    1952:	b9 89       	ldd	r27, Y+17	; 0x11
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	a1 05       	cpc	r26, r1
    1958:	b1 05       	cpc	r27, r1
    195a:	19 f0       	breq	.+6      	; 0x1962 <CLCD_voidNumber+0xae>
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	88 23       	and	r24, r24
    1960:	39 f6       	brne	.-114    	; 0x18f0 <CLCD_voidNumber+0x3c>
	CLCD_voidSendString(&buf[i+1]);
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 01       	movw	r18, r24
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	ce 01       	movw	r24, r28
    1970:	02 96       	adiw	r24, 0x02	; 2
    1972:	82 0f       	add	r24, r18
    1974:	93 1f       	adc	r25, r19
    1976:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidSendString>
}
    197a:	61 96       	adiw	r28, 0x11	; 17
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	08 95       	ret

00001990 <CLCD_voidWritename>:
void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <CLCD_voidWritename+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <CLCD_voidWritename+0x8>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9b 83       	std	Y+3, r25	; 0x03
    199e:	8a 83       	std	Y+2, r24	; 0x02
    19a0:	6c 83       	std	Y+4, r22	; 0x04

	for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <CLCD_voidWritename+0x3c>
	{
		CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	9b 81       	ldd	r25, Y+3	; 0x03
    19b0:	fc 01       	movw	r30, r24
    19b2:	e2 0f       	add	r30, r18
    19b4:	f3 1f       	adc	r31, r19
    19b6:	80 81       	ld	r24, Z
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	69 81       	ldd	r22, Y+1	; 0x01
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	29 81       	ldd	r18, Y+1	; 0x01
    19c2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <CLCD_voidWrite_SpacialC>
	CLCD_voidSendString(&buf[i+1]);
}
void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
{

	for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	8f 5f       	subi	r24, 0xFF	; 255
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	99 81       	ldd	r25, Y+1	; 0x01
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	98 17       	cp	r25, r24
    19d2:	48 f3       	brcs	.-46     	; 0x19a6 <CLCD_voidWritename+0x16>
	{
		CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
	}
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <CLCD_ClearScreen>:




void CLCD_ClearScreen(void)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLEAR_COMMAND);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <CLCD_voidCursorShift>:


void CLCD_voidCursorShift(u8 dircation)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	88 23       	and	r24, r24
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <CLCD_voidCursorShift+0x1a>
		CLCD_voidSendCommand(0x14);
    1a08:	84 e1       	ldi	r24, 0x14	; 20
    1a0a:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <CLCD_voidCursorShift+0x26>
	else if(dircation==Left)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	19 f4       	brne	.+6      	; 0x1a1c <CLCD_voidCursorShift+0x26>
		CLCD_voidSendCommand(0x10);
    1a16:	80 e1       	ldi	r24, 0x10	; 16
    1a18:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
}
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <CLCD_voidDataShift>:

void CLCD_voidDataShift(u8 dircation)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	0f 92       	push	r0
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 23       	and	r24, r24
    1a34:	21 f4       	brne	.+8      	; 0x1a3e <CLCD_voidDataShift+0x1a>
		CLCD_voidSendCommand(0x1c);
    1a36:	8c e1       	ldi	r24, 0x1C	; 28
    1a38:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    1a3c:	06 c0       	rjmp	.+12     	; 0x1a4a <CLCD_voidDataShift+0x26>
	else if(dircation==Left)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	19 f4       	brne	.+6      	; 0x1a4a <CLCD_voidDataShift+0x26>
		CLCD_voidSendCommand(0x18);
    1a44:	88 e1       	ldi	r24, 0x18	; 24
    1a46:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>

}
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <DIO_u8SetPin>:




u8 DIO_u8SetPin(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8value)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	28 97       	sbiw	r28, 0x08	; 8
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	6b 83       	std	Y+3, r22	; 0x03
    1a6a:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1a6c:	19 82       	std	Y+1, r1	; 0x01
     if(copy_u8pin<=DIO_u8PIN7)
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <DIO_u8SetPin+0x24>
    1a74:	f4 c0       	rjmp	.+488    	; 0x1c5e <DIO_u8SetPin+0x20c>
    {
        if(copy_u8value==DIO_u8PIN_LOW)
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	88 23       	and	r24, r24
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <DIO_u8SetPin+0x2c>
    1a7c:	77 c0       	rjmp	.+238    	; 0x1b6c <DIO_u8SetPin+0x11a>
        {
            switch(copy_u8port)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	38 87       	std	Y+8, r19	; 0x08
    1a86:	2f 83       	std	Y+7, r18	; 0x07
    1a88:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8a:	98 85       	ldd	r25, Y+8	; 0x08
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	59 f1       	breq	.+86     	; 0x1ae8 <DIO_u8SetPin+0x96>
    1a92:	2f 81       	ldd	r18, Y+7	; 0x07
    1a94:	38 85       	ldd	r19, Y+8	; 0x08
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <DIO_u8SetPin+0x54>
    1a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9e:	98 85       	ldd	r25, Y+8	; 0x08
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f0       	breq	.+26     	; 0x1abe <DIO_u8SetPin+0x6c>
    1aa4:	60 c0       	rjmp	.+192    	; 0x1b66 <DIO_u8SetPin+0x114>
    1aa6:	2f 81       	ldd	r18, Y+7	; 0x07
    1aa8:	38 85       	ldd	r19, Y+8	; 0x08
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	89 f1       	breq	.+98     	; 0x1b12 <DIO_u8SetPin+0xc0>
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	98 85       	ldd	r25, Y+8	; 0x08
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <DIO_u8SetPin+0x6a>
    1aba:	40 c0       	rjmp	.+128    	; 0x1b3c <DIO_u8SetPin+0xea>
    1abc:	54 c0       	rjmp	.+168    	; 0x1b66 <DIO_u8SetPin+0x114>
            {
                case DIO_u8PORTA : CLR_BIT(PORTA,copy_u8pin); break;
    1abe:	ab e3       	ldi	r26, 0x3B	; 59
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	eb e3       	ldi	r30, 0x3B	; 59
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_u8SetPin+0x8a>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_u8SetPin+0x86>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	bd c0       	rjmp	.+378    	; 0x1c62 <DIO_u8SetPin+0x210>
                case DIO_u8PORTB : CLR_BIT(PORTB,copy_u8pin); break;
    1ae8:	a8 e3       	ldi	r26, 0x38	; 56
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e8 e3       	ldi	r30, 0x38	; 56
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_u8SetPin+0xb4>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_u8SetPin+0xb0>
    1b0a:	80 95       	com	r24
    1b0c:	84 23       	and	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	a8 c0       	rjmp	.+336    	; 0x1c62 <DIO_u8SetPin+0x210>
                case DIO_u8PORTC : CLR_BIT(PORTC,copy_u8pin); break;
    1b12:	a5 e3       	ldi	r26, 0x35	; 53
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e3       	ldi	r30, 0x35	; 53
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_u8SetPin+0xde>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_u8SetPin+0xda>
    1b34:	80 95       	com	r24
    1b36:	84 23       	and	r24, r20
    1b38:	8c 93       	st	X, r24
    1b3a:	93 c0       	rjmp	.+294    	; 0x1c62 <DIO_u8SetPin+0x210>
                case DIO_u8PORTD : CLR_BIT(PORTD,copy_u8pin); break;
    1b3c:	a2 e3       	ldi	r26, 0x32	; 50
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	48 2f       	mov	r20, r24
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 2e       	mov	r0, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <DIO_u8SetPin+0x108>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <DIO_u8SetPin+0x104>
    1b5e:	80 95       	com	r24
    1b60:	84 23       	and	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	7e c0       	rjmp	.+252    	; 0x1c62 <DIO_u8SetPin+0x210>
                default: Local_u8ErrorState=1; break;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	7b c0       	rjmp	.+246    	; 0x1c62 <DIO_u8SetPin+0x210>
            }
        }
        else if(copy_u8value ==DIO_u8PIN_HIGH)
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <DIO_u8SetPin+0x122>
    1b72:	72 c0       	rjmp	.+228    	; 0x1c58 <DIO_u8SetPin+0x206>
        {
            switch(copy_u8port)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3e 83       	std	Y+6, r19	; 0x06
    1b7c:	2d 83       	std	Y+5, r18	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	49 f1       	breq	.+82     	; 0x1bda <DIO_u8SetPin+0x188>
    1b88:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <DIO_u8SetPin+0x14a>
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <DIO_u8SetPin+0x160>
    1b9a:	5b c0       	rjmp	.+182    	; 0x1c52 <DIO_u8SetPin+0x200>
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	71 f1       	breq	.+92     	; 0x1c02 <DIO_u8SetPin+0x1b0>
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	e9 f1       	breq	.+122    	; 0x1c2a <DIO_u8SetPin+0x1d8>
    1bb0:	50 c0       	rjmp	.+160    	; 0x1c52 <DIO_u8SetPin+0x200>
            {
                case DIO_u8PORTA : SET_BIT(PORTA,copy_u8pin); break;
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_u8SetPin+0x17e>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_u8SetPin+0x17a>
    1bd4:	84 2b       	or	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	44 c0       	rjmp	.+136    	; 0x1c62 <DIO_u8SetPin+0x210>
                case DIO_u8PORTB : SET_BIT(PORTB,copy_u8pin); break;
    1bda:	a8 e3       	ldi	r26, 0x38	; 56
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_u8SetPin+0x1a6>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_u8SetPin+0x1a2>
    1bfc:	84 2b       	or	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	30 c0       	rjmp	.+96     	; 0x1c62 <DIO_u8SetPin+0x210>
                case DIO_u8PORTC : SET_BIT(PORTC,copy_u8pin); break;
    1c02:	a5 e3       	ldi	r26, 0x35	; 53
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e5 e3       	ldi	r30, 0x35	; 53
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 2e       	mov	r0, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_u8SetPin+0x1ce>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	0a 94       	dec	r0
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_u8SetPin+0x1ca>
    1c24:	84 2b       	or	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	1c c0       	rjmp	.+56     	; 0x1c62 <DIO_u8SetPin+0x210>
                case DIO_u8PORTD : SET_BIT(PORTD,copy_u8pin); break;
    1c2a:	a2 e3       	ldi	r26, 0x32	; 50
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e2 e3       	ldi	r30, 0x32	; 50
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_u8SetPin+0x1f6>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_u8SetPin+0x1f2>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	08 c0       	rjmp	.+16     	; 0x1c62 <DIO_u8SetPin+0x210>
                default: Local_u8ErrorState=1; break;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <DIO_u8SetPin+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_u8SetPin+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
    }
        
    return Local_u8ErrorState;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c64:	28 96       	adiw	r28, 0x08	; 8
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <DIO_u8SetPort>:
u8 DIO_u8SetPort (u8 copy_u8port,u8 copy_u8value)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <DIO_u8SetPort+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <DIO_u8SetPort+0x8>
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    1c86:	6b 83       	std	Y+3, r22	; 0x03
     u8 Local_u8ErrorState=0;
    1c88:	19 82       	std	Y+1, r1	; 0x01
      switch(copy_u8port)
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	3d 83       	std	Y+5, r19	; 0x05
    1c92:	2c 83       	std	Y+4, r18	; 0x04
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	d1 f0       	breq	.+52     	; 0x1cd2 <DIO_u8SetPort+0x5c>
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <DIO_u8SetPort+0x3c>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <DIO_u8SetPort+0x52>
    1cb0:	1f c0       	rjmp	.+62     	; 0x1cf0 <DIO_u8SetPort+0x7a>
    1cb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb6:	22 30       	cpi	r18, 0x02	; 2
    1cb8:	31 05       	cpc	r19, r1
    1cba:	81 f0       	breq	.+32     	; 0x1cdc <DIO_u8SetPort+0x66>
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	81 f0       	breq	.+32     	; 0x1ce6 <DIO_u8SetPort+0x70>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <DIO_u8SetPort+0x7a>
    {
        case DIO_u8PORTA: PORTA=copy_u8value; break; 
    1cc8:	eb e3       	ldi	r30, 0x3B	; 59
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	80 83       	st	Z, r24
    1cd0:	11 c0       	rjmp	.+34     	; 0x1cf4 <DIO_u8SetPort+0x7e>
        case DIO_u8PORTB: PORTB=copy_u8value; break; 
    1cd2:	e8 e3       	ldi	r30, 0x38	; 56
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	80 83       	st	Z, r24
    1cda:	0c c0       	rjmp	.+24     	; 0x1cf4 <DIO_u8SetPort+0x7e>
        case DIO_u8PORTC: PORTC=copy_u8value; break; 
    1cdc:	e5 e3       	ldi	r30, 0x35	; 53
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	80 83       	st	Z, r24
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <DIO_u8SetPort+0x7e>
        case DIO_u8PORTD: PORTD=copy_u8value; break; 
    1ce6:	e2 e3       	ldi	r30, 0x32	; 50
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	80 83       	st	Z, r24
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_u8SetPort+0x7e>
        default: Local_u8ErrorState=1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
          
    }
    
     return Local_u8ErrorState;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <DIO_u8GetPin>:

u8 DIO_u8GetPin (u8 copy_port ,u8 copy_pin,u8* copy_value)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	27 97       	sbiw	r28, 0x07	; 7
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
    1d1c:	6b 83       	std	Y+3, r22	; 0x03
    1d1e:	5d 83       	std	Y+5, r21	; 0x05
    1d20:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1d22:	19 82       	std	Y+1, r1	; 0x01
     if((copy_value!=NULL ) && (copy_pin<=DIO_u8PIN7))
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <DIO_u8GetPin+0x28>
    1d2c:	78 c0       	rjmp	.+240    	; 0x1e1e <DIO_u8GetPin+0x118>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <DIO_u8GetPin+0x30>
    1d34:	74 c0       	rjmp	.+232    	; 0x1e1e <DIO_u8GetPin+0x118>
     {
         switch(copy_port)
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3f 83       	std	Y+7, r19	; 0x07
    1d3e:	2e 83       	std	Y+6, r18	; 0x06
    1d40:	4e 81       	ldd	r20, Y+6	; 0x06
    1d42:	5f 81       	ldd	r21, Y+7	; 0x07
    1d44:	41 30       	cpi	r20, 0x01	; 1
    1d46:	51 05       	cpc	r21, r1
    1d48:	59 f1       	breq	.+86     	; 0x1da0 <DIO_u8GetPin+0x9a>
    1d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	91 05       	cpc	r25, r1
    1d52:	34 f4       	brge	.+12     	; 0x1d60 <DIO_u8GetPin+0x5a>
    1d54:	2e 81       	ldd	r18, Y+6	; 0x06
    1d56:	3f 81       	ldd	r19, Y+7	; 0x07
    1d58:	21 15       	cp	r18, r1
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	69 f0       	breq	.+26     	; 0x1d78 <DIO_u8GetPin+0x72>
    1d5e:	5c c0       	rjmp	.+184    	; 0x1e18 <DIO_u8GetPin+0x112>
    1d60:	4e 81       	ldd	r20, Y+6	; 0x06
    1d62:	5f 81       	ldd	r21, Y+7	; 0x07
    1d64:	42 30       	cpi	r20, 0x02	; 2
    1d66:	51 05       	cpc	r21, r1
    1d68:	79 f1       	breq	.+94     	; 0x1dc8 <DIO_u8GetPin+0xc2>
    1d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6e:	83 30       	cpi	r24, 0x03	; 3
    1d70:	91 05       	cpc	r25, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <DIO_u8GetPin+0x70>
    1d74:	3d c0       	rjmp	.+122    	; 0x1df0 <DIO_u8GetPin+0xea>
    1d76:	50 c0       	rjmp	.+160    	; 0x1e18 <DIO_u8GetPin+0x112>
         {
             case DIO_u8PORTA: *copy_value=GET_BIT(PINA,copy_pin);  break;
    1d78:	e9 e3       	ldi	r30, 0x39	; 57
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_u8GetPin+0x8a>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_u8GetPin+0x86>
    1d94:	ca 01       	movw	r24, r20
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9c:	80 83       	st	Z, r24
    1d9e:	41 c0       	rjmp	.+130    	; 0x1e22 <DIO_u8GetPin+0x11c>
             case DIO_u8PORTB: *copy_value=GET_BIT(PINB,copy_pin);  break;
    1da0:	e6 e3       	ldi	r30, 0x36	; 54
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_u8GetPin+0xb2>
    1db4:	55 95       	asr	r21
    1db6:	47 95       	ror	r20
    1db8:	8a 95       	dec	r24
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_u8GetPin+0xae>
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	81 70       	andi	r24, 0x01	; 1
    1dc0:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc2:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc4:	80 83       	st	Z, r24
    1dc6:	2d c0       	rjmp	.+90     	; 0x1e22 <DIO_u8GetPin+0x11c>
             case DIO_u8PORTC: *copy_value=GET_BIT(PINC,copy_pin);  break;
    1dc8:	e3 e3       	ldi	r30, 0x33	; 51
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a9 01       	movw	r20, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_u8GetPin+0xda>
    1ddc:	55 95       	asr	r21
    1dde:	47 95       	ror	r20
    1de0:	8a 95       	dec	r24
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_u8GetPin+0xd6>
    1de4:	ca 01       	movw	r24, r20
    1de6:	81 70       	andi	r24, 0x01	; 1
    1de8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dea:	fd 81       	ldd	r31, Y+5	; 0x05
    1dec:	80 83       	st	Z, r24
    1dee:	19 c0       	rjmp	.+50     	; 0x1e22 <DIO_u8GetPin+0x11c>
             case DIO_u8PORTD: *copy_value=GET_BIT(PIND,copy_pin);  break;
    1df0:	e0 e3       	ldi	r30, 0x30	; 48
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a9 01       	movw	r20, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_u8GetPin+0x102>
    1e04:	55 95       	asr	r21
    1e06:	47 95       	ror	r20
    1e08:	8a 95       	dec	r24
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_u8GetPin+0xfe>
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	ec 81       	ldd	r30, Y+4	; 0x04
    1e12:	fd 81       	ldd	r31, Y+5	; 0x05
    1e14:	80 83       	st	Z, r24
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <DIO_u8GetPin+0x11c>
             
             default: Local_u8ErrorState=1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_u8GetPin+0x11c>
             
         }
     }
     else
     {
         Local_u8ErrorState=1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
     }
     
    
     return Local_u8ErrorState;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e24:	27 96       	adiw	r28, 0x07	; 7
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <BCD_toDicmal>:
#include "DS1307_interface.h"
#include "DS1307_private.h"


static u8 BCD_toDicmal(u8 copy_u8number)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <BCD_toDicmal+0x6>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Dicmal=(copy_u8number&0x0f);
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	8f 70       	andi	r24, 0x0F	; 15
    1e46:	89 83       	std	Y+1, r24	; 0x01
	Dicmal+=(copy_u8number>>4)*10;
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	82 95       	swap	r24
    1e4c:	8f 70       	andi	r24, 0x0F	; 15
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 01       	movw	r18, r24
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	c9 01       	movw	r24, r18
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	98 2f       	mov	r25, r24
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	89 0f       	add	r24, r25
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	return Dicmal;
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <DS_SetTime>:
void DS_SetTime(DS1307_t *copy_DSconfig)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <DS_SetTime+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01

	TWI_SendStartcon();								// start communication with ds1307
    1e88:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_SendStartcon>
	TWI_SendSlaveAddress_Write(SLAVE_ADDRESS);		// send slave address
    1e8c:	88 e6       	ldi	r24, 0x68	; 104
    1e8e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <TWI_SendSlaveAddress_Write>
	TWI_MasterWriteData(DS1307_START_ADDRESS);		// send start address in ds1307
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>

	TWI_MasterWriteData(copy_DSconfig->second);		// write second
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	80 81       	ld	r24, Z
    1e9e:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_DSconfig->min);		// write minute
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	81 81       	ldd	r24, Z+1	; 0x01
    1ea8:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_DSconfig->hour);		// write hour
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_DSconfig->week_day);	// write Week day
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	87 81       	ldd	r24, Z+7	; 0x07
    1ebc:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_DSconfig->day);		// write day
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	84 81       	ldd	r24, Z+4	; 0x04
    1ec6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_DSconfig->month);		// write month
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	85 81       	ldd	r24, Z+5	; 0x05
    1ed0:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_DSconfig->year);		// write year
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	86 81       	ldd	r24, Z+6	; 0x06
    1eda:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>

	TWI_voidSendStopCondition();					// stop communication
    1ede:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TWI_voidSendStopCondition>

}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <DS_ReadTime>:

void DS_ReadTime(DS1307_t *copy_DSconfig)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <DS_ReadTime+0x6>
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	/***************** receive data form ds1307 ************************/
	TWI_SendStartcon();								// start communication with DS130
    1efa:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_SendStartcon>
	TWI_SendSlaveAddress_Write(SLAVE_ADDRESS);		// send Slave address for ds1307
    1efe:	88 e6       	ldi	r24, 0x68	; 104
    1f00:	0e 94 d5 10 	call	0x21aa	; 0x21aa <TWI_SendSlaveAddress_Write>
	TWI_MasterWriteData(DS1307_START_ADDRESS);		// send start address for ds1307
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TWI_MasterWriteData>
	TWI_SendRestartcon();							// send restart condition
    1f0a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <TWI_SendRestartcon>
	TWI_SendSlaveAddress_Read(0x68);				// send Slave address for ds1307 againg
    1f0e:	88 e6       	ldi	r24, 0x68	; 104
    1f10:	0e 94 aa 10 	call	0x2154	; 0x2154 <TWI_SendSlaveAddress_Read>
	TWI_MasterReadData(&copy_DSconfig->second);     // read second
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_MasterReadData>
	TWI_MasterReadData(&copy_DSconfig->min);        // read minute
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_MasterReadData>
	TWI_MasterReadData(&copy_DSconfig->hour);       // read hour
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	02 96       	adiw	r24, 0x02	; 2
    1f2c:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_MasterReadData>
	TWI_MasterReadData(&copy_DSconfig->week_day);   // read Week day
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	07 96       	adiw	r24, 0x07	; 7
    1f36:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_MasterReadData>
	TWI_MasterReadData(&copy_DSconfig->day);        // read day
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	04 96       	adiw	r24, 0x04	; 4
    1f40:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_MasterReadData>
	TWI_MasterReadData(&copy_DSconfig->month);      // read month
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	05 96       	adiw	r24, 0x05	; 5
    1f4a:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_MasterReadData>
	TWI_MasterReadData_N(&copy_DSconfig->year);     // read year
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	06 96       	adiw	r24, 0x06	; 6
    1f54:	0e 94 6d 11 	call	0x22da	; 0x22da <TWI_MasterReadData_N>

	TWI_voidSendStopCondition();					// stop communication
    1f58:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TWI_voidSendStopCondition>

	/*************** convert form BCD to dismal *******************/
	copy_DSconfig->second=BCD_toDicmal(copy_DSconfig->second);
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	80 81       	ld	r24, Z
    1f62:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1f66:	e9 81       	ldd	r30, Y+1	; 0x01
    1f68:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6a:	80 83       	st	Z, r24
	copy_DSconfig->min=BCD_toDicmal(copy_DSconfig->min);
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	81 81       	ldd	r24, Z+1	; 0x01
    1f72:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1f76:	e9 81       	ldd	r30, Y+1	; 0x01
    1f78:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7a:	81 83       	std	Z+1, r24	; 0x01
	copy_DSconfig->hour=BCD_toDicmal(copy_DSconfig->hour);
    1f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1f86:	e9 81       	ldd	r30, Y+1	; 0x01
    1f88:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8a:	82 83       	std	Z+2, r24	; 0x02
	copy_DSconfig->week_day=BCD_toDicmal(copy_DSconfig->week_day);
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	87 81       	ldd	r24, Z+7	; 0x07
    1f92:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1f96:	e9 81       	ldd	r30, Y+1	; 0x01
    1f98:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9a:	87 83       	std	Z+7, r24	; 0x07
	copy_DSconfig->day=BCD_toDicmal(copy_DSconfig->day);
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	84 81       	ldd	r24, Z+4	; 0x04
    1fa2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	84 83       	std	Z+4, r24	; 0x04
	copy_DSconfig->month=BCD_toDicmal(copy_DSconfig->month);
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	85 81       	ldd	r24, Z+5	; 0x05
    1fb2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	85 83       	std	Z+5, r24	; 0x05
	copy_DSconfig->year=BCD_toDicmal(copy_DSconfig->year);
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	86 81       	ldd	r24, Z+6	; 0x06
    1fc2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <BCD_toDicmal>
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	86 83       	std	Z+6, r24	; 0x06
	copy_DSconfig->APM=copy_DSconfig->hour/12;
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	9c e0       	ldi	r25, 0x0C	; 12
    1fd4:	69 2f       	mov	r22, r25
    1fd6:	0e 94 9c 12 	call	0x2538	; 0x2538 <__udivmodqi4>
    1fda:	e9 81       	ldd	r30, Y+1	; 0x01
    1fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fde:	83 83       	std	Z+3, r24	; 0x03

}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <PORT_voidInti>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInti(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_drive;
    1ff2:	ea e3       	ldi	r30, 0x3A	; 58
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	80 83       	st	Z, r24
	DDRB=PORTB_drive;
    1ffa:	e7 e3       	ldi	r30, 0x37	; 55
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	87 e0       	ldi	r24, 0x07	; 7
    2000:	80 83       	st	Z, r24
	DDRC=PORTC_drive;
    2002:	e4 e3       	ldi	r30, 0x34	; 52
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	10 82       	st	Z, r1
	DDRD=PORTD_drive;
    2008:	e1 e3       	ldi	r30, 0x31	; 49
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	10 82       	st	Z, r1
	
	PORTA=PORTA_INTI_VALUE;
    200e:	eb e3       	ldi	r30, 0x3B	; 59
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	10 82       	st	Z, r1
	PORTB=PORTB_INTI_VALUE;
    2014:	e8 e3       	ldi	r30, 0x38	; 56
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	10 82       	st	Z, r1
	PORTC=PORTC_INTI_VALUE;
    201a:	e5 e3       	ldi	r30, 0x35	; 53
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	10 82       	st	Z, r1
	PORTD=PORTD_INTI_VALUE;
    2020:	e2 e3       	ldi	r30, 0x32	; 50
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	10 82       	st	Z, r1

}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <TWI_voidMasterInt>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_regisger.h"

void TWI_voidMasterInt(u8 copy_u8SlaveAddress)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	89 83       	std	Y+1, r24	; 0x01
	/* SET CLOCK fre to 400kb/s*/
	TWBR=32;
    2038:	e0 e2       	ldi	r30, 0x20	; 32
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 e2       	ldi	r24, 0x20	; 32
    203e:	80 83       	st	Z, r24
	TWSR=0;
    2040:	e1 e2       	ldi	r30, 0x21	; 33
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	10 82       	st	Z, r1
	//CLR_BIT(TWSR,TWSR_TWPS0);
	//CLR_BIT(TWSR,TWSR_TWPS1);
	/*set address for master if it was recive*/

	TWAR=2;
    2046:	e2 e2       	ldi	r30, 0x22	; 34
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	80 83       	st	Z, r24

	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    204e:	a6 e5       	ldi	r26, 0x56	; 86
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e6 e5       	ldi	r30, 0x56	; 86
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	84 60       	ori	r24, 0x04	; 4
    205a:	8c 93       	st	X, r24


}
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <TWI_voidSlaveInt>:
void TWI_voidSlaveInt(u8 copy_u8SlaveAddress)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	0f 92       	push	r0
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	89 83       	std	Y+1, r24	; 0x01
	/*INti address */
	TWAR= (copy_u8SlaveAddress<<1);
    2070:	e2 e2       	ldi	r30, 0x22	; 34
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	88 0f       	add	r24, r24
    2078:	80 83       	st	Z, r24

	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    207a:	a6 e5       	ldi	r26, 0x56	; 86
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e6 e5       	ldi	r30, 0x56	; 86
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	84 60       	ori	r24, 0x04	; 4
    2086:	8c 93       	st	X, r24

}
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <TWI_SendStartcon>:

TWI_error TWI_SendStartcon(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
	TWI_error local_error=NO_error;
    209a:	19 82       	std	Y+1, r1	; 0x01
	/* send start condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTA);
    209c:	a6 e5       	ldi	r26, 0x56	; 86
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e6 e5       	ldi	r30, 0x56	; 86
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 62       	ori	r24, 0x20	; 32
    20a8:	8c 93       	st	X, r24

	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    20aa:	a6 e5       	ldi	r26, 0x56	; 86
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e6 e5       	ldi	r30, 0x56	; 86
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 68       	ori	r24, 0x80	; 128
    20b6:	8c 93       	st	X, r24
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    20b8:	a6 e5       	ldi	r26, 0x56	; 86
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e6 e5       	ldi	r30, 0x56	; 86
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	84 60       	ori	r24, 0x04	; 4
    20c4:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    20c6:	e6 e5       	ldi	r30, 0x56	; 86
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	88 23       	and	r24, r24
    20ce:	dc f7       	brge	.-10     	; 0x20c6 <TWI_SendStartcon+0x36>
	if((TWSR&0xf8)!=Start_AC)
    20d0:	e1 e2       	ldi	r30, 0x21	; 33
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	88 7f       	andi	r24, 0xF8	; 248
    20dc:	90 70       	andi	r25, 0x00	; 0
    20de:	88 30       	cpi	r24, 0x08	; 8
    20e0:	91 05       	cpc	r25, r1
    20e2:	11 f0       	breq	.+4      	; 0x20e8 <TWI_SendStartcon+0x58>
	{
		local_error=Start_Error;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <TWI_SendRestartcon>:
TWI_error TWI_SendRestartcon(void)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
	TWI_error local_error=NO_error;
    20fc:	19 82       	std	Y+1, r1	; 0x01
	/* send start condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTA);
    20fe:	a6 e5       	ldi	r26, 0x56	; 86
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e6 e5       	ldi	r30, 0x56	; 86
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	80 62       	ori	r24, 0x20	; 32
    210a:	8c 93       	st	X, r24
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    210c:	a6 e5       	ldi	r26, 0x56	; 86
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e6 e5       	ldi	r30, 0x56	; 86
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	84 60       	ori	r24, 0x04	; 4
    2118:	8c 93       	st	X, r24
	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    211a:	a6 e5       	ldi	r26, 0x56	; 86
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e6 e5       	ldi	r30, 0x56	; 86
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	80 68       	ori	r24, 0x80	; 128
    2126:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    2128:	e6 e5       	ldi	r30, 0x56	; 86
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	88 23       	and	r24, r24
    2130:	dc f7       	brge	.-10     	; 0x2128 <TWI_SendRestartcon+0x36>
	if((TWSR&0xf8)!=RE_Start_AC)
    2132:	e1 e2       	ldi	r30, 0x21	; 33
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	88 7f       	andi	r24, 0xF8	; 248
    213e:	90 70       	andi	r25, 0x00	; 0
    2140:	80 31       	cpi	r24, 0x10	; 16
    2142:	91 05       	cpc	r25, r1
    2144:	11 f0       	breq	.+4      	; 0x214a <TWI_SendRestartcon+0x58>
	{
		local_error=Re_StartError;
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    214a:	89 81       	ldd	r24, Y+1	; 0x01

}
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <TWI_SendSlaveAddress_Read>:

TWI_error TWI_SendSlaveAddress_Read(u8 copy_u8SlaveAddress)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <TWI_SendSlaveAddress_Read+0x6>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    2160:	19 82       	std	Y+1, r1	; 0x01
	/*clear Start condition*/
	//CLR_BIT(TWCR,TWCR_TWSTA);

	/*set slave Address on the 7 most bit*/
	TWDR=((copy_u8SlaveAddress<<1)|1);
    2162:	e3 e2       	ldi	r30, 0x23	; 35
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	81 60       	ori	r24, 0x01	; 1
    2172:	80 83       	st	Z, r24
	/*SET for Read request*/

	/* clear interrupt flag of to start operation*/
	TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN);
    2174:	e6 e5       	ldi	r30, 0x56	; 86
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	84 e8       	ldi	r24, 0x84	; 132
    217a:	80 83       	st	Z, r24
	/*enable TWI*/

	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    217c:	e6 e5       	ldi	r30, 0x56	; 86
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	88 23       	and	r24, r24
    2184:	dc f7       	brge	.-10     	; 0x217c <TWI_SendSlaveAddress_Read+0x28>
	if((TWSR&0xf8)!=Salve_Add_RD_AC)
    2186:	e1 e2       	ldi	r30, 0x21	; 33
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	88 7f       	andi	r24, 0xF8	; 248
    2192:	90 70       	andi	r25, 0x00	; 0
    2194:	80 34       	cpi	r24, 0x40	; 64
    2196:	91 05       	cpc	r25, r1
    2198:	11 f0       	breq	.+4      	; 0x219e <TWI_SendSlaveAddress_Read+0x4a>
	{
		local_error=Slave_ADD_RD_Err;
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    219e:	89 81       	ldd	r24, Y+1	; 0x01

}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <TWI_SendSlaveAddress_Write>:
TWI_error TWI_SendSlaveAddress_Write(u8 copy_u8SlaveAddress )
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <TWI_SendSlaveAddress_Write+0x6>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    21b6:	19 82       	std	Y+1, r1	; 0x01

	TWDR=((copy_u8SlaveAddress<<1) & 0xFE);
    21b8:	e3 e2       	ldi	r30, 0x23	; 35
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	80 83       	st	Z, r24
	/*enable TWI*/
	TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN);
    21c8:	e6 e5       	ldi	r30, 0x56	; 86
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	84 e8       	ldi	r24, 0x84	; 132
    21ce:	80 83       	st	Z, r24


	/* clear interrupt flag of to start operation*/
	//SET_BIT(TWCR,TWCR_TWINT);
	/* wait until the falg is rised*/
	while(!(GET_BIT(TWCR,TWCR_TWINT)));
    21d0:	e6 e5       	ldi	r30, 0x56	; 86
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	dc f7       	brge	.-10     	; 0x21d0 <TWI_SendSlaveAddress_Write+0x26>
	if(( TWSR & 0xf8 ) != Salve_Add_WR_AC)
    21da:	e1 e2       	ldi	r30, 0x21	; 33
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	88 7f       	andi	r24, 0xF8	; 248
    21e6:	90 70       	andi	r25, 0x00	; 0
    21e8:	88 31       	cpi	r24, 0x18	; 24
    21ea:	91 05       	cpc	r25, r1
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <TWI_SendSlaveAddress_Write+0x48>
	{
		local_error=Slave_ADD_WR_Err;
    21ee:	84 e0       	ldi	r24, 0x04	; 4
    21f0:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    21f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <TWI_MasterWriteData>:

TWI_error TWI_MasterWriteData(u8 copy_u8Data)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <TWI_MasterWriteData+0x6>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    220a:	19 82       	std	Y+1, r1	; 0x01
	/* write the data in */
	TWDR=copy_u8Data;
    220c:	e3 e2       	ldi	r30, 0x23	; 35
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	80 83       	st	Z, r24

	/* clear interrupt flag of to start operation*/
	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWEN);
    2214:	e6 e5       	ldi	r30, 0x56	; 86
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	84 e8       	ldi	r24, 0x84	; 132
    221a:	80 83       	st	Z, r24

	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    221c:	e6 e5       	ldi	r30, 0x56	; 86
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	88 23       	and	r24, r24
    2224:	dc f7       	brge	.-10     	; 0x221c <TWI_MasterWriteData+0x1e>
	if((TWSR&0xf8)!=Master_WR_AC)
    2226:	e1 e2       	ldi	r30, 0x21	; 33
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	88 7f       	andi	r24, 0xF8	; 248
    2232:	90 70       	andi	r25, 0x00	; 0
    2234:	88 32       	cpi	r24, 0x28	; 40
    2236:	91 05       	cpc	r25, r1
    2238:	11 f0       	breq	.+4      	; 0x223e <TWI_MasterWriteData+0x40>
	{
		local_error=Master_WR_Err;
    223a:	85 e0       	ldi	r24, 0x05	; 5
    223c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error;
    223e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <TWI_MasterReadData>:
TWI_error TWI_MasterReadData(u8 *copy_u8Data)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <TWI_MasterReadData+0x6>
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    225a:	19 82       	std	Y+1, r1	; 0x01
	/*enable master to generate AC*/
	SET_BIT(TWCR,TWCR_TWEA);
    225c:	a6 e5       	ldi	r26, 0x56	; 86
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e6 e5       	ldi	r30, 0x56	; 86
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	80 64       	ori	r24, 0x40	; 64
    2268:	8c 93       	st	X, r24
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    226a:	a6 e5       	ldi	r26, 0x56	; 86
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e6 e5       	ldi	r30, 0x56	; 86
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	84 60       	ori	r24, 0x04	; 4
    2276:	8c 93       	st	X, r24
	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    2278:	a6 e5       	ldi	r26, 0x56	; 86
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e6 e5       	ldi	r30, 0x56	; 86
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	80 68       	ori	r24, 0x80	; 128
    2284:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    2286:	e6 e5       	ldi	r30, 0x56	; 86
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	88 23       	and	r24, r24
    228e:	dc f7       	brge	.-10     	; 0x2286 <TWI_MasterReadData+0x3c>
	if((TWSR&0xf8)!=Master_RD_AC)
    2290:	e1 e2       	ldi	r30, 0x21	; 33
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	88 7f       	andi	r24, 0xF8	; 248
    229c:	90 70       	andi	r25, 0x00	; 0
    229e:	80 35       	cpi	r24, 0x50	; 80
    22a0:	91 05       	cpc	r25, r1
    22a2:	19 f0       	breq	.+6      	; 0x22aa <TWI_MasterReadData+0x60>
	{
		local_error=Master_RD_Err;
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	06 c0       	rjmp	.+12     	; 0x22b6 <TWI_MasterReadData+0x6c>
	}
	else{
		/* Read the Recived data*/
		*copy_u8Data=TWDR;
    22aa:	e3 e2       	ldi	r30, 0x23	; 35
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	ea 81       	ldd	r30, Y+2	; 0x02
    22b2:	fb 81       	ldd	r31, Y+3	; 0x03
    22b4:	80 83       	st	Z, r24
	}


	return local_error;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
	/*generate  stop condition on the path */
	//SET_BIT(TWCR,TWCR_TWSTO);
	/* clear interrupt flag of to start operation*/
	//SET_BIT(TWCR,TWCR_TWINT);

	TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWSTO)|(1<<TWCR_TWEN);
    22cc:	e6 e5       	ldi	r30, 0x56	; 86
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	84 e9       	ldi	r24, 0x94	; 148
    22d2:	80 83       	st	Z, r24


}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <TWI_MasterReadData_N>:

TWI_error TWI_MasterReadData_N(u8 *copy_u8Data)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <TWI_MasterReadData_N+0x6>
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9b 83       	std	Y+3, r25	; 0x03
    22e8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    22ea:	19 82       	std	Y+1, r1	; 0x01
	/*Disable master to generate AC*/
	CLR_BIT(TWCR,TWCR_TWEA);
    22ec:	a6 e5       	ldi	r26, 0x56	; 86
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e6 e5       	ldi	r30, 0x56	; 86
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8f 7b       	andi	r24, 0xBF	; 191
    22f8:	8c 93       	st	X, r24
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    22fa:	a6 e5       	ldi	r26, 0x56	; 86
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e6 e5       	ldi	r30, 0x56	; 86
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	84 60       	ori	r24, 0x04	; 4
    2306:	8c 93       	st	X, r24
	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    2308:	a6 e5       	ldi	r26, 0x56	; 86
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e6 e5       	ldi	r30, 0x56	; 86
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	80 68       	ori	r24, 0x80	; 128
    2314:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    2316:	e6 e5       	ldi	r30, 0x56	; 86
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	88 23       	and	r24, r24
    231e:	dc f7       	brge	.-10     	; 0x2316 <TWI_MasterReadData_N+0x3c>
	if((TWSR&0xf8)!=Master_RD_NAC)
    2320:	e1 e2       	ldi	r30, 0x21	; 33
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	88 7f       	andi	r24, 0xF8	; 248
    232c:	90 70       	andi	r25, 0x00	; 0
    232e:	88 35       	cpi	r24, 0x58	; 88
    2330:	91 05       	cpc	r25, r1
    2332:	19 f0       	breq	.+6      	; 0x233a <TWI_MasterReadData_N+0x60>
	{
		local_error=Master_RD_Err;
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	06 c0       	rjmp	.+12     	; 0x2346 <TWI_MasterReadData_N+0x6c>
	}
	else{
		/* Read the Recived data*/
		*copy_u8Data=TWDR;
    233a:	e3 e2       	ldi	r30, 0x23	; 35
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	ea 81       	ldd	r30, Y+2	; 0x02
    2342:	fb 81       	ldd	r31, Y+3	; 0x03
    2344:	80 83       	st	Z, r24
	}


	return local_error;
    2346:	89 81       	ldd	r24, Y+1	; 0x01

}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <main>:

u8 *days[7]={"Sat","Sun","Mon","Tue","Wen","Thu","Fri"};


void main(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	66 97       	sbiw	r28, 0x16	; 22
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInti();
    2368:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <PORT_voidInti>
	CLCD_voidInit();
    236c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <CLCD_voidInit>
	TWI_voidMasterInt(0);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_voidMasterInt>
	//DS_SetClock(0x55,0x59,0x12,0);


	while(1)
	{
		DS_ReadTime(&curren_time);
    2376:	ce 01       	movw	r24, r28
    2378:	0f 96       	adiw	r24, 0x0f	; 15
    237a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <DS_ReadTime>
		CLCD_ClearScreen();
    237e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <CLCD_ClearScreen>
		CLCD_voidNumber(curren_time.hour%12);
    2382:	89 89       	ldd	r24, Y+17	; 0x11
    2384:	9c e0       	ldi	r25, 0x0C	; 12
    2386:	69 2f       	mov	r22, r25
    2388:	0e 94 9c 12 	call	0x2538	; 0x2538 <__udivmodqi4>
    238c:	89 2f       	mov	r24, r25
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e0       	ldi	r26, 0x00	; 0
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CLCD_voidNumber>
		CLCD_voidSendData(':');
    239e:	8a e3       	ldi	r24, 0x3A	; 58
    23a0:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		CLCD_voidNumber(curren_time.min);
    23a4:	88 89       	ldd	r24, Y+16	; 0x10
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CLCD_voidNumber>
		CLCD_voidSendData(':');
    23b6:	8a e3       	ldi	r24, 0x3A	; 58
    23b8:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		CLCD_voidNumber(curren_time.second);
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CLCD_voidNumber>
		if(curren_time.APM)
    23ce:	8a 89       	ldd	r24, Y+18	; 0x12
    23d0:	88 23       	and	r24, r24
    23d2:	29 f0       	breq	.+10     	; 0x23de <main+0x8a>
		{
			CLCD_voidSendString(" PM");
    23d4:	8c e7       	ldi	r24, 0x7C	; 124
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidSendString>
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <main+0x92>
		}
		else
		{
			CLCD_voidSendString(" AM");
    23de:	80 e8       	ldi	r24, 0x80	; 128
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidSendString>
		}
		CLCD_voidGOTOXY(1,0);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <CLCD_voidGOTOXY>
		CLCD_voidNumber(curren_time.day);
    23ee:	8b 89       	ldd	r24, Y+19	; 0x13
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CLCD_voidNumber>
		CLCD_voidSendData('/');
    2400:	8f e2       	ldi	r24, 0x2F	; 47
    2402:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		CLCD_voidNumber(curren_time.month);
    2406:	8c 89       	ldd	r24, Y+20	; 0x14
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CLCD_voidNumber>
		CLCD_voidSendString("/20");
    2418:	84 e8       	ldi	r24, 0x84	; 132
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidSendString>
		CLCD_voidNumber(curren_time.year);
    2420:	8d 89       	ldd	r24, Y+21	; 0x15
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e0       	ldi	r26, 0x00	; 0
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CLCD_voidNumber>
		CLCD_voidSendData(' ');
    2432:	80 e2       	ldi	r24, 0x20	; 32
    2434:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		CLCD_voidSendString((char *) days[curren_time.week_day-1]);
    2438:	8e 89       	ldd	r24, Y+22	; 0x16
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	fc 01       	movw	r30, r24
    2446:	e0 57       	subi	r30, 0x70	; 112
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidSendString>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	aa e7       	ldi	r26, 0x7A	; 122
    2458:	b4 e4       	ldi	r27, 0x44	; 68
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	9c 87       	std	Y+12, r25	; 0x0c
    245e:	ad 87       	std	Y+13, r26	; 0x0d
    2460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a e7       	ldi	r20, 0x7A	; 122
    2470:	53 e4       	ldi	r21, 0x43	; 67
    2472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	98 87       	std	Y+8, r25	; 0x08
    247e:	a9 87       	std	Y+9, r26	; 0x09
    2480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <main+0x150>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <main+0x1ce>
	else if (__tmp > 65535)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <main+0x1b0>
    24e6:	89 e1       	ldi	r24, 0x19	; 25
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <main+0x19e>
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <main+0x192>
    250c:	34 cf       	rjmp	.-408    	; 0x2376 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <main+0x1da>
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	1f cf       	rjmp	.-450    	; 0x2376 <main+0x22>

00002538 <__udivmodqi4>:
    2538:	99 1b       	sub	r25, r25
    253a:	79 e0       	ldi	r23, 0x09	; 9
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <__udivmodqi4_ep>

0000253e <__udivmodqi4_loop>:
    253e:	99 1f       	adc	r25, r25
    2540:	96 17       	cp	r25, r22
    2542:	08 f0       	brcs	.+2      	; 0x2546 <__udivmodqi4_ep>
    2544:	96 1b       	sub	r25, r22

00002546 <__udivmodqi4_ep>:
    2546:	88 1f       	adc	r24, r24
    2548:	7a 95       	dec	r23
    254a:	c9 f7       	brne	.-14     	; 0x253e <__udivmodqi4_loop>
    254c:	80 95       	com	r24
    254e:	08 95       	ret

00002550 <__udivmodsi4>:
    2550:	a1 e2       	ldi	r26, 0x21	; 33
    2552:	1a 2e       	mov	r1, r26
    2554:	aa 1b       	sub	r26, r26
    2556:	bb 1b       	sub	r27, r27
    2558:	fd 01       	movw	r30, r26
    255a:	0d c0       	rjmp	.+26     	; 0x2576 <__udivmodsi4_ep>

0000255c <__udivmodsi4_loop>:
    255c:	aa 1f       	adc	r26, r26
    255e:	bb 1f       	adc	r27, r27
    2560:	ee 1f       	adc	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	a2 17       	cp	r26, r18
    2566:	b3 07       	cpc	r27, r19
    2568:	e4 07       	cpc	r30, r20
    256a:	f5 07       	cpc	r31, r21
    256c:	20 f0       	brcs	.+8      	; 0x2576 <__udivmodsi4_ep>
    256e:	a2 1b       	sub	r26, r18
    2570:	b3 0b       	sbc	r27, r19
    2572:	e4 0b       	sbc	r30, r20
    2574:	f5 0b       	sbc	r31, r21

00002576 <__udivmodsi4_ep>:
    2576:	66 1f       	adc	r22, r22
    2578:	77 1f       	adc	r23, r23
    257a:	88 1f       	adc	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	1a 94       	dec	r1
    2580:	69 f7       	brne	.-38     	; 0x255c <__udivmodsi4_loop>
    2582:	60 95       	com	r22
    2584:	70 95       	com	r23
    2586:	80 95       	com	r24
    2588:	90 95       	com	r25
    258a:	9b 01       	movw	r18, r22
    258c:	ac 01       	movw	r20, r24
    258e:	bd 01       	movw	r22, r26
    2590:	cf 01       	movw	r24, r30
    2592:	08 95       	ret

00002594 <__prologue_saves__>:
    2594:	2f 92       	push	r2
    2596:	3f 92       	push	r3
    2598:	4f 92       	push	r4
    259a:	5f 92       	push	r5
    259c:	6f 92       	push	r6
    259e:	7f 92       	push	r7
    25a0:	8f 92       	push	r8
    25a2:	9f 92       	push	r9
    25a4:	af 92       	push	r10
    25a6:	bf 92       	push	r11
    25a8:	cf 92       	push	r12
    25aa:	df 92       	push	r13
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	ca 1b       	sub	r28, r26
    25be:	db 0b       	sbc	r29, r27
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	09 94       	ijmp

000025cc <__epilogue_restores__>:
    25cc:	2a 88       	ldd	r2, Y+18	; 0x12
    25ce:	39 88       	ldd	r3, Y+17	; 0x11
    25d0:	48 88       	ldd	r4, Y+16	; 0x10
    25d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    25d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    25d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    25d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    25da:	9b 84       	ldd	r9, Y+11	; 0x0b
    25dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    25de:	b9 84       	ldd	r11, Y+9	; 0x09
    25e0:	c8 84       	ldd	r12, Y+8	; 0x08
    25e2:	df 80       	ldd	r13, Y+7	; 0x07
    25e4:	ee 80       	ldd	r14, Y+6	; 0x06
    25e6:	fd 80       	ldd	r15, Y+5	; 0x05
    25e8:	0c 81       	ldd	r16, Y+4	; 0x04
    25ea:	1b 81       	ldd	r17, Y+3	; 0x03
    25ec:	aa 81       	ldd	r26, Y+2	; 0x02
    25ee:	b9 81       	ldd	r27, Y+1	; 0x01
    25f0:	ce 0f       	add	r28, r30
    25f2:	d1 1d       	adc	r29, r1
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	ed 01       	movw	r28, r26
    2600:	08 95       	ret

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
